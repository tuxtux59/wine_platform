require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/tasting_notes', type: :request do
  fixtures :bottles, :experts
  # This should return the minimal set of attributes required to create a valid
  # TastingNote. As you add validations to TastingNote, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      score: 3.5,
      expert_id: experts(:one).id,
      bottle_id: bottles(:one).id
    }
  end

  let(:invalid_attributes) do
    { score: 0, expert_id: experts(:one).id,
      bottle_id: bottles(:one).id }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # Api::TastingNotesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      TastingNote.create! valid_attributes
      get api_tasting_notes_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      tasting_note = TastingNote.create! valid_attributes
      get api_tasting_note_url(tasting_note), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new TastingNote' do
        previous_count = TastingNote.count
        post api_tasting_notes_url,
             params: { tasting_note: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to be_successful
        expect(TastingNote.count).to eq(previous_count + 1)
      end

      it 'renders a JSON response with the new tasting_note' do
        post api_tasting_notes_url,
             params: { tasting_note: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new TastingNote' do
        expect do
          post api_tasting_notes_url,
               params: { tasting_note: invalid_attributes }, as: :json
        end.to change(TastingNote, :count).by(0)
      end

      it 'renders a JSON response with errors for the new tasting_note' do
        post api_tasting_notes_url,
             params: { tasting_note: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { score: 5 }
      end

      it 'updates the requested tasting_note' do
        tasting_note = TastingNote.create! valid_attributes
        patch api_tasting_note_url(tasting_note),
              params: { tasting_note: new_attributes }, headers: valid_headers, as: :json
        tasting_note.reload
        # skip('Add assertions for updated state')
      end

      it 'renders a JSON response with the tasting_note' do
        tasting_note = TastingNote.create! valid_attributes
        patch api_tasting_note_url(tasting_note),
              params: { tasting_note: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the tasting_note' do
        tasting_note = TastingNote.create! valid_attributes
        patch api_tasting_note_url(tasting_note),
              params: { tasting_note: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested tasting_note' do
      tasting_note = TastingNote.create! valid_attributes
      expect do
        delete api_tasting_note_url(tasting_note), headers: valid_headers, as: :json
      end.to change(TastingNote, :count).by(-1)
    end
  end
end
